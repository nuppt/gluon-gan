import argparse

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dataset', required=True, help='cifar10 | lsun | imagenet | folder | lfw ')
    parser.add_argument('--data_root', required=True, help='path to dataset')
    parser.add_argument('--manualSeed', type=int, default=10, help='seed number for result reproduction')
    parser.add_argument('--workers', type=int, help='number of data loading workers', default=2)
    parser.add_argument('--batchSize', type=int, default=128, help='input batch size')
    parser.add_argument('--imageSize', type=int, default=64, help='the height / width of the input image to network')
    parser.add_argument('--nc', type=int, default=3, help='input image channels')
    parser.add_argument('--nz', type=int, default=100, help='size of the latent z vector')
    parser.add_argument('--ngf', type=int, default=64)
    parser.add_argument('--ndf', type=int, default=64)
    parser.add_argument('--num_epochs', type=int, default=25, help='number of epochs to train for')
    parser.add_argument('--lrD', type=float, default=0.0002, help='learning rate for Critic, default=0.0002')
    parser.add_argument('--lrG', type=float, default=0.0002, help='learning rate for Generator, default=0.0002')
    parser.add_argument('--beta1', type=float, default=0.5, help='beta1 for adam. default=0.5 (Note: 0.9 may result in training oscillation and instability)')
    parser.add_argument('--netG_param', default='', help="path to netG (to continue training)")
    parser.add_argument('--netD_param', default='', help="path to netD (to continue training)")
    parser.add_argument('--num_iter_D', type=int, default=5, help='number of D iters per each G iter')
    parser.add_argument('--n_extra_layers', type=int, default=0, help='Number of extra layers on gen and disc')
    parser.add_argument('--experiment', default='./experiments', help='Where to store samples and models')
    parser.add_argument('--adam', action='store_true', help='Whether to use adam (default is rmsprop)')
    parser.add_argument('--cuda'  , action='store_true', help='enables cuda')
    parser.add_argument('--ngpu'  , type=int, default=1, help='number of GPUs to use')
    opt = parser.parse_args()
    print(opt)
    return opt
